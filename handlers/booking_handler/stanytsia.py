import asyncio
import requests
import re
from aiogram import Bot, Dispatcher, F, types, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import bots
import keyboards
from datetime import datetime
import pytz
from calendars import STANYTSIA_TEAMUP_API_KEY, STANYTSIA_TEAMUP_CALENDAR_ID
from . import db_booking
from .booking_menu import fetch_calendar_events, add_calendar_event, check_event_conflicts
from handlers.start_menu import user_db
from handlers.booking_handler.botton_kb import create_cancel_button
from calendars import get_subcalendars

router = Router()
bot = Bot(bots.main_bot, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
aprooved = []


class Stanytsia_Bookingreg(StatesGroup):
    stanytsia_number_of_room = State()
    stanytsia_day = State()
    stanytsia_start_time = State()
    stanytsia_end_time = State()


@router.callback_query(F.data == "stanytsia")
async def bookstanytsia(callback: types.CallbackQuery):
    if len(aprooved) < 1:
        await callback.message.edit_reply_markup()
        await callback.message.edit_text(
            "–ß—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä! –ü–µ—Ä—à –∑–∞ –≤—Å–µ, –¥–∞–≤–∞–π –æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—å —ñ–∑ <a "
            "href='https://docs.google.com/document/d/1Wj5SvHRSfrgAw7oWq68VOVH5hjNeQOGsNqTaai1v-dg/edit?usp=drivesdk'>–ø—Ä–∞–≤–∏–ª–∞–º–∏</a>. "
            "–ó–Ω–∞—é, —á–∏—Ç–∞—Ç–∏ —ó—Ö –±—É–≤–∞—î "
            "–Ω—É–¥–Ω–æ, –∞–ª–µ —á–∞—Å—Ç–æ –∑–∞–≤–¥—è–∫–∏ –ø—Ä–∞–≤–∏–ª–∞–º –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –∞ —Ç–∞–∫–æ–∂ —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–π–≤–∏—Ö "
            "–Ω–µ–ø–æ—Ä–æ–∑—É–º—ñ–Ω—å. –¢–æ–∂ –Ω–µ –ª—ñ–Ω—É–π—Å—è, –ø—Ä–æ—á–∏—Ç–∞–π ‚Äî –ø—ñ–¥–Ω—ñ–º–∏ –Ω–∞—Å—Ç—Ä—ñ–π –Ω–∞—à–æ–º—É –æ—Ñ—ñ—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É üë∑üèª‚Äç‚ôÇÔ∏è‚ùóÔ∏è–ù–∞—Ç–∏—Å–∫–∞—é—á–∏ "
            "\"–ü–æ–≥–æ–¥–∂—É—é—Å—å —ñ–∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏\", —Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—à —Å–≤–æ—î –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è —ñ –æ–±—ñ—Ü—è—î—à —á–µ–º–Ω–æ —ó—Ö –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ ü´°",
            reply_markup=keyboards.approovancebuilder,
            parse_mode=ParseMode.HTML)
    else:
        await callback.message.edit_reply_markup()
        await callback.message.edit_text(
            "–ü–µ—Ä–µ–¥ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º –Ω–∞ –∫–Ω–æ–ø–∫—É <b>'–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è'</b> –ø–µ—Ä–µ–≥–ª—è–Ω—å <b>–∫–∞–ª–µ–Ω–¥–∞—Ä –±—Ä–æ–Ω—é–≤–∞–Ω—å</b> –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –≤—ñ–ª—å–Ω–∏–º –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ç–æ–±—ñ —á–∞—ÅüìÖ",
            reply_markup=keyboards.stanytsiakb, parse_mode=ParseMode.HTML)


@router.callback_query(F.data == "approoved")
async def bookstanytsia(callback: types.CallbackQuery):
    aprooved.append(1)
    await callback.message.edit_reply_markup()
    await callback.message.edit_text(
        "–ü–µ—Ä–µ–¥ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º –Ω–∞ –∫–Ω–æ–ø–∫—É <b>'–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è'</b> –ø–µ—Ä–µ–≥–ª—è–Ω—å <b>–∫–∞–ª–µ–Ω–¥–∞—Ä –±—Ä–æ–Ω—é–≤–∞–Ω—å</b> –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –≤—ñ–ª—å–Ω–∏–º –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ç–æ–±—ñ —á–∞—ÅüìÖ",
        reply_markup=keyboards.stanytsiakb, parse_mode=ParseMode.HTML)


@router.callback_query(F.data == "RegistrateBookingStanytsia")
async def reg_stanytsia_two(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup()
    await state.set_state(Stanytsia_Bookingreg.stanytsia_number_of_room)
    await callback_query.message.edit_text("üö™–û–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏:", reply_markup=keyboards.stanytsia_rooms_builder.as_markup())


@router.callback_query(Stanytsia_Bookingreg.stanytsia_number_of_room)
async def reg_stanytsia_three(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.delete()
    await state.update_data(stanytsia_number_of_room=callback.data)
    await state.set_state(Stanytsia_Bookingreg.stanytsia_day)
    await callback.message.answer("–í–≤–µ–¥–∏ –¥–µ–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î-–ú–ú-–†–†–†–†. \n üìÜ–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20-05-2024")


@router.message(Stanytsia_Bookingreg.stanytsia_day)
async def reg_stanytsia_four(message: Message, state: FSMContext):
    date_pattern = r"^(0[1-9]|[12]\d|3[01])-(0[1-9]|1[0-2])-\d{4}$"

    if not re.match(date_pattern, message.text):
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –¥–µ–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î-–ú–ú-–†–†–†–†. \n üìÜ–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20-05-2024")
        return

    day, month, year = message.text.split('-')
    formatted_date = f"{year}-{month}-{day}"

    await state.update_data(stanytsia_day=formatted_date)
    await state.set_state(Stanytsia_Bookingreg.stanytsia_start_time)
    await message.answer("–í–≤–µ–¥–∏ —á–∞—Å –ø–æ—á–∞—Ç–∫—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• \n ‚è∞–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 15:00")


@router.message(Stanytsia_Bookingreg.stanytsia_start_time)
async def reg_stanytsia_five(message: Message, state: FSMContext):
    time_pattern = r"^(?:[01]\d|2[0-3]):[0-5]\d$"
    if not re.match(time_pattern, message.text):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•. \n ‚è∞–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 15:00")
        return
    await state.update_data(stanytsia_start_time=message.text)
    await state.set_state(Stanytsia_Bookingreg.stanytsia_end_time)
    await message.answer("–ê —Ç–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è \n ‚è∞–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 16:00")


@router.message(Stanytsia_Bookingreg.stanytsia_end_time)
async def reg_stanytsia_six(message: Message, state: FSMContext):
    time_pattern = r"^(?:[01]\d|2[0-3]):[0-5]\d$"
    if not re.match(time_pattern, message.text):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•. \n ‚è∞–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 16:00")
        return
    await state.update_data(stanytsia_end_time=message.text)
    data = await state.get_data()

    room_mapping = get_subcalendars(STANYTSIA_TEAMUP_CALENDAR_ID, STANYTSIA_TEAMUP_API_KEY)
    if data["stanytsia_number_of_room"] in room_mapping:
        room = data["stanytsia_number_of_room"]
        data["stanytsia_number_of_room"] = room_mapping[data["stanytsia_number_of_room"]]
    else:
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫—ñ–º–Ω–∞—Ç–∏. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —â–µ —Ä–∞–∑.")
        return

    local_tz = pytz.timezone("Europe/Kiev")
    start_datetime = local_tz.localize(
        datetime.strptime(f'{data["stanytsia_day"]} {data["stanytsia_start_time"]}', '%Y-%m-%d %H:%M')).astimezone(
        pytz.utc)
    end_datetime = local_tz.localize(
        datetime.strptime(f'{data["stanytsia_day"]} {data["stanytsia_end_time"]}', '%Y-%m-%d %H:%M')).astimezone(
        pytz.utc)

    print(
        f"Checking conflicts for room {data['stanytsia_number_of_room']} from {start_datetime.isoformat()} to {end_datetime.isoformat()}")
    if await check_event_conflicts(data["stanytsia_number_of_room"], start_datetime.isoformat(),
                                   end_datetime.isoformat(), STANYTSIA_TEAMUP_CALENDAR_ID, STANYTSIA_TEAMUP_API_KEY):
        await message.answer("–ù–∞ —Ü–µ–π —á–∞—Å —É –≤–∏–±—Ä–∞–Ω—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ –≤–∂–µ —î –ø–æ–¥—ñ—è. –í–∏–±–µ—Ä–∏ —ñ–Ω—à–∏–π —á–∞—Å.")
        await state.set_state(Stanytsia_Bookingreg.stanytsia_day)  # –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –¥–∞—Ç–∏
        await message.answer("–í–≤–µ–¥–∏ –¥–µ–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î. \n üìÜ–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 2024-05-20")
    else:
        response = await add_calendar_event(data, start_datetime.isoformat(), end_datetime.isoformat(),
                                            STANYTSIA_TEAMUP_CALENDAR_ID, STANYTSIA_TEAMUP_API_KEY, "stanytsia",
                                            message)
        if 'event' in response:
            user_db_obj = user_db.DataBase("db_plast.db").get_user(message.from_user.id)

            db = db_booking.BookingDataBase("db_plast.db")
            db.add_book_reg(user_id=message.from_user.id, user_name=user_db_obj['user_name'],
                            user_surname=user_db_obj['user_surname'], user_domivka="C—Ç–∞–Ω–∏—Ü—è", user_room=room,
                            user_date=data["stanytsia_day"], user_start_time=data["stanytsia_start_time"],
                            user_end_time=data["stanytsia_end_time"],
                            code_of_booking=response['event'].get('id', 'no_code'))
            await message.answer(
                'üôåüèª –ù–µ–π–º–æ–≤—ñ—Ä–Ω–æ! –¢–≤–æ—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –π–æ–≥–æ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ —É <i><a href="https://teamup.com/kstbv5srw3gter52zv">–∫–∞–ª–µ–Ω–¥–∞—Ä—ñ</a></i>. \n\n‚ùì–ú–∞—î—à –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è? –•–æ—á–µ—à –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –≤—ñ–¥–≥—É–∫–æ–º? @lvivplastoffice –Ω–∞–¥–∞—Å—Ç—å –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤\'—è–∑–æ–∫ üí¨',
                parse_mode=ParseMode.HTML,
            reply_markup=keyboards.mainkb)
            await state.clear()

            if user_db_obj['user_nickname'] is None:
                nickname_text = ''
            else:
                nickname_text = f'–ù—ñ–∫–Ω–µ–π–º @{user_db_obj['user_nickname']}'

            await bot.send_message(chat_id=-1002421947656,
                                   text=f'''–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è #–°{response['event'].get('id', 'no_code')}
–Ü–º'—è: {user_db_obj['user_name']}
–ü—Ä—ñ–∑–≤–∏—â–µ: {user_db_obj['user_surname']}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user_db_obj['user_phone']}
{nickname_text}
–î–æ–º—ñ–≤–∫–∞: –°—Ç–∞–Ω–∏—Ü—è
–ö—ñ–º–Ω–∞—Ç–∞: {room}
–î–µ–Ω—å: {data["stanytsia_day"]}
–ß–∞—Å: {data["stanytsia_start_time"]} - {data["stanytsia_end_time"]}
''', reply_markup=create_cancel_button(user_db_obj['user_id'], response['event'].get('id', 'no_code'), '–°'))

        else:
            await message.answer(
                "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó.‚òπÔ∏è –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ—Ñ—ñ—Å—É –ü–ª–∞—Å—Ç—É @lvivplastoffice.",
            reply_markup=keyboards.mainkb)
            await state.clear()
