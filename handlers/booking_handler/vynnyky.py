import asyncio
import requests
import re
from aiogram import Bot, Dispatcher, F, types, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import bots
import keyboards
from datetime import datetime
import pytz
from calendars import VYNNYKY_TEAMUP_API_KEY, VYNNYKY_TEAMUP_CALENDAR_ID
from . import db_booking
from .booking_menu import fetch_calendar_events, add_calendar_event, check_event_conflicts
from handlers.start_menu import user_db
from handlers.booking_handler.botton_kb import create_cancel_button
from calendars import get_subcalendars

router = Router()
bot = Bot(bots.main_bot, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
approved = []


class vynnyky_Bookingreg(StatesGroup):
    vynnyky_number_of_room = State()
    vynnyky_day = State()
    vynnyky_start_time = State()
    vynnyky_end_time = State()


@router.callback_query(F.data == "vynnyky")
async def bookstanytsia(callback: types.CallbackQuery):
    if len(approved) < 1:
        await callback.message.edit_reply_markup()
        await callback.message.edit_text(
            "–ß—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä! –ü–µ—Ä—à –∑–∞ –≤—Å–µ, –¥–∞–≤–∞–π –æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—å —ñ–∑ <a "
            "href='https://docs.google.com/document/d/1t2F3z0Js5R31bl_9qfp_OolrA1D17S-S4y-aXicusf0/edit?usp=sharing'>–ø—Ä–∞–≤–∏–ª–∞–º–∏</a>. "
            "–ó–Ω–∞—é, —á–∏—Ç–∞—Ç–∏ —ó—Ö –±—É–≤–∞—î "
            "–Ω—É–¥–Ω–æ, –∞–ª–µ —á–∞—Å—Ç–æ –∑–∞–≤–¥—è–∫–∏ –ø—Ä–∞–≤–∏–ª–∞–º –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –∞ —Ç–∞–∫–æ–∂ —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–π–≤–∏—Ö "
            "–Ω–µ–ø–æ—Ä–æ–∑—É–º—ñ–Ω—å. –¢–æ–∂ –Ω–µ –ª—ñ–Ω—É–π—Å—è, –ø—Ä–æ—á–∏—Ç–∞–π ‚Äî –ø—ñ–¥–Ω—ñ–º–∏ –Ω–∞—Å—Ç—Ä—ñ–π –Ω–∞—à–æ–º—É –æ—Ñ—ñ—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É üë∑üèª‚Äç‚ôÇÔ∏è \n \n‚ùóÔ∏è–ù–∞—Ç–∏—Å–∫–∞—é—á–∏ "
            "\"–ü–æ–≥–æ–¥–∂—É—é—Å—å —ñ–∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏\", —Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—à —Å–≤–æ—î –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è —ñ –æ–±—ñ—Ü—è—î—à —á–µ–º–Ω–æ —ó—Ö –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ ü´°",
            reply_markup=keyboards.approovancebuilder_v,
            parse_mode=ParseMode.HTML)
    else:
        await callback.message.edit_reply_markup()
        await callback.message.edit_text(
           "–ü–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ <b>\"–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è\"</b>, –ø–µ—Ä–µ–≥–ª—è–Ω—å <b>–∫–∞–ª–µ–Ω–¥–∞—Ä –±—Ä–æ–Ω—é–≤–∞–Ω—å</b> —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ —Ç–æ—á–Ω–æ –≤—ñ–ª—å–Ω–µ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ç–æ–±—ñ —á–∞—Å üìÖ", 
            reply_markup=keyboards.vynnykykb, parse_mode=ParseMode.HTML)

@router.callback_query(F.data == "approoved_v")
@router.callback_query(F.data == "RegistrateBookingVynnyky")
async def bookvynnyky(callback: types.CallbackQuery):
    approved.append(1)
    await callback.message.edit_reply_markup()
    await callback.message.edit_text(
        """üè† –î–ª—è —Ç–æ–≥–æ, –∞–±–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –í–∏—à–∫—ñ–ª—å–Ω–∏–π —Ü–µ–Ω—Ç—Ä —ñ–º. –ü–µ—Ç—Ä–∞ –§—Ä–∞–Ω–∫–∞ —É –í–∏–Ω–Ω–∏–∫–∞—Ö –Ω–∞–ø–∏—à–∏ –Ω–∞–º —É —Ç–µ–ª–µ–≥—Ä–∞–º @lvivplastoffice –∞–±–æ –∂ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π –∑–∞ –Ω–æ–º–µ—Ä–æ–º +380951215011

üö™ –£ —Å–≤–æ—î–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –≤–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±, —è–∫—ñ –±—É–¥—É—Ç—å –ø—Ä–∏—Å—É—Ç–Ω—ñ –Ω–∞ –∑–∞—Ö–æ–¥—ñ —Ç–∞ –≤–∏–±–µ—Ä–∏ –∑–æ–Ω–∏, —è–∫—ñ –≤–∞–º –±—É–¥—É—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ (—É —Ü–µ–Ω—Ç—Ä—ñ —î –¥–≤–∞ –ø–æ–≤–µ—Ä—Ö–∏: –≤–µ–ª–∏–∫–∏–π –∑–∞–ª —ñ–∑ –ø—Ä–æ–µ–∫—Ç–æ—Ä–æ–º, –∞ —Ç–∞–∫–æ–∂ –∫—É—Ö–Ω—è –Ω–∞ –ø–µ—Ä—à–æ–º—É –ø–≤–µ—Ä—Å—ñ —Ç–∞ –∫—ñ–ª—å–∫–∞ –æ–∫—Ä–µ–º–∏—Ö –∫—ñ–º–Ω–∞—Ç –Ω–∞ –¥—Ä—É–≥–æ–º—É)

üìÜ –û–±–æ–≤'—è–∑–∫–æ–≤–æ –Ω–∞–ø–∏—à–∏ —á–∞—Å–æ–≤–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–¥–∞—Ç–∞ —ñ —á–∞—Å), –∞ —Ç–∞–∫–æ–∂ –≤–∫–∞–∂–∏, —á–∏ —î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –Ω–æ—á—ñ–≤–ª—ñ""", reply_markup=keyboards.vynnykybooking_kb, parse_mode=ParseMode.HTML)


# @router.callback_query(F.data == "RegistrateBookingVynnyky")
# async def reg_vynnyky_two(callback_query: CallbackQuery, state: FSMContext):
#     await callback_query.message.edit_reply_markup()
#     await state.set_state(vynnyky_Bookingreg.vynnyky_number_of_room)
#     await callback_query.message.edit_text("üö™–û–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏:", reply_markup=keyboards.vynnyky_rooms_builder.as_markup())


# @router.callback_query(vynnyky_Bookingreg.vynnyky_number_of_room)
# async def reg_vynnyky_three(callback: CallbackQuery, state: FSMContext):
#     await callback.message.edit_reply_markup()
#     await callback.message.delete()
#     await state.update_data(vynnyky_number_of_room=callback.data)
#     await state.set_state(vynnyky_Bookingreg.vynnyky_day)
#     await callback.message.answer("–í–≤–µ–¥–∏ –¥–µ–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î-–ú–ú-–†–†–†–†. \n üìÜ–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20-05-2024")


# @router.message(vynnyky_Bookingreg.vynnyky_day)
# async def reg_vynnyky_four(message: Message, state: FSMContext):
#     date_pattern = r"^(0[1-9]|[12]\d|3[01])-(0[1-9]|1[0-2])-\d{4}$"

#     if not re.match(date_pattern, message.text):
#         await message.answer(
#             "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –¥–µ–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î-–ú–ú-–†–†–†–†. \n üìÜ–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20-05-2024")
#         return

#     day, month, year = message.text.split('-')
#     formatted_date = f"{year}-{month}-{day}"

#     await state.update_data(vynnyky_day=formatted_date)

#     await state.set_state(vynnyky_Bookingreg.vynnyky_start_time)
#     await message.answer("–í–≤–µ–¥–∏ —á–∞—Å –ø–æ—á–∞—Ç–∫—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•. \n ‚è∞–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 15:00")


# @router.message(vynnyky_Bookingreg.vynnyky_start_time)
# async def reg_vynnyky_five(message: Message, state: FSMContext):
#     time_pattern = r"^(?:[01]\d|2[0-3]):[0-5]\d$"
#     if not re.match(time_pattern, message.text):
#         await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•. \n ‚è∞–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 15:00")
#         return
#     await state.update_data(vynnyky_start_time=message.text)
#     await state.set_state(vynnyky_Bookingreg.vynnyky_end_time)
#     await message.answer("–í–≤–µ–¥–∏ —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•. \n ‚è∞–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 16:00")


# @router.message(vynnyky_Bookingreg.vynnyky_end_time)
# async def reg_vynnyky_six(message: Message, state: FSMContext):
#     time_pattern = r"^(?:[01]\d|2[0-3]):[0-5]\d$"
#     if not re.match(time_pattern, message.text):
#         await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•. \n ‚è∞–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 16:00")
#         return
#     await state.update_data(vynnyky_end_time=message.text)
#     data = await state.get_data()

#     vynnyky_room_mapping = get_subcalendars(VYNNYKY_TEAMUP_CALENDAR_ID, VYNNYKY_TEAMUP_API_KEY)
#     if data["vynnyky_number_of_room"] in vynnyky_room_mapping:
#         room = data["vynnyky_number_of_room"]
#         data["vynnyky_number_of_room"] = vynnyky_room_mapping[data["vynnyky_number_of_room"]]
#     else:
#         await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫—ñ–º–Ω–∞—Ç–∏. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —â–µ —Ä–∞–∑.")
#         await state.set_state(vynnyky_Bookingreg.vynnyky_number_of_room)
#         await bot.send_message(chat_id=message.from_user.id, text="–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó")
#         return

#     local_tz = pytz.timezone("Europe/Kiev")
#     start_datetime = local_tz.localize(
#         datetime.strptime(f'{data["vynnyky_day"]} {data["vynnyky_start_time"]}', '%Y-%m-%d %H:%M')).astimezone(pytz.utc)
#     end_datetime = local_tz.localize(
#         datetime.strptime(f'{data["vynnyky_day"]} {data["vynnyky_end_time"]}', '%Y-%m-%d %H:%M')).astimezone(pytz.utc)

#     print(
#         f"Checking conflicts for room {data['vynnyky_number_of_room']} from {start_datetime.isoformat()} to {end_datetime.isoformat()}")
#     if await check_event_conflicts(data["vynnyky_number_of_room"], start_datetime.isoformat(), end_datetime.isoformat(),
#                                    VYNNYKY_TEAMUP_CALENDAR_ID, VYNNYKY_TEAMUP_API_KEY):
#         await message.answer("–ù–∞ —Ü–µ–π —á–∞—Å —É –≤–∏–±—Ä–∞–Ω—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ –≤–∂–µ —î –ø–æ–¥—ñ—è. –í–∏–±–µ—Ä–∏ —ñ–Ω—à–∏–π —á–∞—Å.")
#         await state.set_state(vynnyky_Bookingreg.vynnyky_day)  # –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –¥–∞—Ç–∏
#         await message.answer("–í–≤–µ–¥–∏ –¥–µ–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î-–ú–ú-–†–†–†–†. \n üìÜ–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20-05-2024")
#     else:
#         response = await add_calendar_event(data, start_datetime.isoformat(), end_datetime.isoformat(),
#                                             VYNNYKY_TEAMUP_CALENDAR_ID, VYNNYKY_TEAMUP_API_KEY, "vynnyky", message)
#         if 'event' in response:
#             user_db_obj = user_db.DataBase("db_plast.db").get_user(message.from_user.id)
#             db = db_booking.BookingDataBase("db_plast.db")
#             db.add_book_reg(user_id=message.from_user.id, user_name=user_db_obj['user_name'],
#                             user_surname=user_db_obj['user_surname'], user_domivka="–í–∏–Ω–Ω–∏–∫–∏", user_room=room,
#                             user_date=data["vynnyky_day"], user_start_time=data["vynnyky_start_time"],
#                             user_end_time=data["vynnyky_end_time"],
#                             code_of_booking=response['event'].get('id', 'no_code'))
#             await message.answer(
#                 '–¢–≤–æ—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞–ø–æ–≤–Ω–µ–Ω–æ.ü•≥ –¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –π–æ–≥–æ —É <i><a href="https://teamup.com/kstbv5srw3gter52zv">–∫–∞–ª–µ–Ω–¥–∞—Ä—ñ</a></i>. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏, —Ç–æ –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –æ—Ñ—ñ—Å—É –ø–ª–∞—Å—Ç—É @lvivplastoffice',
#                 parse_mode=ParseMode.HTML,
#                 reply_markup=keyboards.mainkb)
#             if user_db_obj['user_nickname'] is None:
#                 nickname_text = ''
#             else:
#                 nickname_text = f'–ù—ñ–∫–Ω–µ–π–º @{user_db_obj['user_nickname']}'

#             await bot.send_message(chat_id=-1002421947656,
#                                    text=f'''–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è #–í{response['event'].get('id', 'no_code')}
# –Ü–º'—è: {user_db_obj['user_name']}
# –ü—Ä—ñ–∑–≤–∏—â–µ: {user_db_obj['user_surname']}
# –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user_db_obj['user_phone']}
# {nickname_text}
# –î–æ–º—ñ–≤–∫–∞: –í–∏–Ω–Ω–∏–∫–∏
# –ö—ñ–º–Ω–∞—Ç–∞: {room}
# –î–µ–Ω—å: {data["vynnyky_day"]}
# –ß–∞—Å: {data["vynnyky_start_time"]} - {data["vynnyky_end_time"]}
# ''', reply_markup=create_cancel_button(user_db_obj['user_id'], response['event'].get('id', 'no_code'), '–í'))
#         else:
#             await message.answer(
#                 "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó.‚òπÔ∏è –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ—Ñ—ñ—Å—É –ü–ª–∞—Å—Ç—É @lvivplastoffice.")
#         await state.clear()
