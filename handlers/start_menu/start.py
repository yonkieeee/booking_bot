from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart, or_f
from aiogram.types import Message, ReplyKeyboardRemove
from handlers.start_menu.user_db import DataBase
from handlers.start_menu import bools
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from handlers.start_menu import start_keyboard as kb
import keyboards

router = Router()
db = DataBase("db_plast.db")

reg_info = []


class registrate_user(StatesGroup):
    user_fullname = State()
    user_surname = State()
    user_age = State()
    user_phone = State()
    user_email = State()


@router.message(or_f(CommandStart(), Command("menu")))
async def start(message: Message, state: FSMContext):
    if not db.user_exists(str(message.from_user.id)):
        await message.answer('''–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å :)

üë§ –ê–±–∏ —è –º—ñ–≥ –±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—î —ñ–º‚Äô—è —Å–ø–æ—á–∞—Ç–∫—É –º–µ–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏

‚ùóÔ∏è–ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É, —â–æ –±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏ –º–æ–∂—É—Ç—å –ª–∏—à–µ –ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—ñ –ø–ª–∞—Å—Ç—É–Ω–∏

‚úÖ –ü–µ—Ä—à –Ω—ñ–∂ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –¥–∞–π –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö''',
                             reply_markup=kb.agree_button
                             )
    else:
        await state.clear()
        await message.answer("""–ß–∏–º —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?""", reply_markup=keyboards.mainkb)


@router.message(F.text == '–ü–æ–≥–æ–¥–∂—É—é—Å—å')
async def start_of_reg(message: Message, state: FSMContext):
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ")
    await state.set_state(registrate_user.user_fullname)


@router.message(F.text == '–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ')
async def start_of_reg(message: Message, state: FSMContext):
    reg_info.clear()
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ")
    await state.set_state(registrate_user.user_fullname)


@router.message(registrate_user.user_fullname)
async def reg_surname(message: Message, state: FSMContext):
    if bools.check_fullname(message.text):
        reg_info.append(message.text)
        await message.answer("–î–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.MM.–†–†–†–†\nüìÜ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 30.12.2001")
        await state.set_state(registrate_user.user_age)
    elif str(message.text).split()[0] > 50 or str(message.text).split()[1] > 50:
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –∑–∞–±–∞–≥–∞—Ç–æ —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
    else:
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ñ–º'—è –∞–±–æ –ø—Ä—ñ–∑–≤–∏—â–µ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")


@router.message(registrate_user.user_age)
async def reg_age(message: Message, state: FSMContext):
    if bools.check_age_num(message.text):
        reg_info.append(message.text)
        await message.answer("–ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É(–ö–Ω–æ–ø–∫–∞ –Ω–∏–∂—á–µ) ‚òéÔ∏è",
                             reply_markup=kb.phone_kb)
        await state.set_state(registrate_user.user_phone)
    else:
        await message.answer("–¢–∏ –≤–≤—ñ–≤ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")


@router.message(registrate_user.user_phone)
async def reg_phone(message: Message, state: FSMContext):
    if message.contact.phone_number:
        reg_info.append(message.contact.phone_number)

        fullname, age, phone = reg_info
        name, surname = str(fullname).split()

        print(reg_info)
        if db.user_exists(str(message.from_user.id)):
            db.user_delete(str(message.from_user.id))

            db.add_user(user_id=str(message.from_user.id),
                        user_nickname=message.from_user.username,
                        user_name=name,
                        user_surname=surname,
                        user_age=age,
                        user_phone=phone)
        else:
            db.add_user(user_id=str(message.from_user.id),
                        user_nickname=message.from_user.username,
                        user_name=name,
                        user_surname=surname,
                        user_age=age,
                        user_phone=phone)
        reg_info.clear()
        if message.from_user.id == "719886646":
            await message.answer_photo("https://t.me/c/1544453874/41907")
            await message.answer("–ó–¥–∞—Ä–æ–≤ —á—É—à–ø–∞–Ω")
            await message.answer_photo("https://t.me/c/1544453874/47740")

        await message.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úîÔ∏è", reply_markup=keyboards.mainkb)
        await state.clear()
        await state.set_state(registrate_user.user_email)
    else:
        await message.answer("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞. –ù–∞—Ç–∏—Å–Ω–∏ —â–µ —Ä–∞–∑ –∫–Ω–æ–ø–∫—É", reply_markup=kb.phone_kb)




@router.message(F.text == "–•—Ç–æ  –∫–µ—Ä—ñ–≤–Ω–∏–∫ —Ü—å–æ–≥–æ –ª–∞–π–Ω–∞ ?")
async def trash(message: Message):
    await message.answer("@naza_rko")



@router.message(F.text == "–ö—É—Ä–≤–∞ –º–∞—á —è –ø–µ—Ä–¥–æ–ª—è")
async def trash(message: Message):
    await message.answer("–ë–æ–±—Ä –∫—É—Ä–≤–∞, —è–∫–µ –±–∏–¥–ª–µ")


@router.message(F.text == "–°–ö–û–ë")
async def skob(message: Message):
    await message.answer("–°–∏–ª—å–Ω–æ. –ö—Ä–∞—Å–Ω–æ. –û–±–µ—Ä–µ–∂–Ω–æ. –ë–∏—Å—Ç—Ä–æ.")

@router.message(F.text == "SKOB")
async def skob(message: Message):
    await message.answer("You think I don`t know english?\nStrong. Beautiful. Carefully. Fast\nSBCF")

@router.message(F.text == "–ó–∞—á–∏—Ç–∞–π —Ä–µ–ø ")
async def mc_petya(message: Message):
    await message.answer("<a href='https://youtube.com/shorts/egLK3Y7L4XM?feature=share'>–†–µ–ø</a>"
                         ,parse_mode=ParseMode.HTML,
                         disable_web_page_preview=True)



