from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardRemove
from handlers.start_menu.user_db import DataBase
from handlers.start_menu import bools
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from handlers.start_menu import start_keyboard as kb
import keyboards

router = Router()
db = DataBase("db_plast.db")
reg_info = []


class registrate_user(StatesGroup):
    user_name = State()
    user_surname = State()
    user_age = State()
    user_phone = State()
    user_email = State()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    if not db.user_exists(message.from_user.id):
        await message.answer('''–ü—Ä–∏–≤—ñ—Ç üëã, —è –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω—å –ø—Ä–∏–º—ñ—â–µ–Ω—å –ü–ª–∞—Å—Ç—É —É –õ—å–≤–æ–≤—ñ!" 
–ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∏ –∑–º–æ–∂–µ—à: 
    üìç –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è –≤ –ø–ª–∞—Å—Ç–æ–≤—ñ–π –¥–æ–º—ñ–≤—Ü—ñ 
    üìç –í–æ–Ω–æ –æ–¥—Ä–∞–∑—É –∑'—è–≤–∏—Ç—å—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è 
    üìç –¢–æ–±—ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —á–µ–∫–∞—Ç–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞ 
    üìç –ó–º–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ –∑—Ä—É—á–Ω–∏–π —á–∞—Å —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ  
    üìç–Ñ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å —Ç–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —ó—Ö –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ 
–Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, —Ç–æ–±—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å. –¢–∞–∫ –Ω–∞–º –±—É–¥–µ –ø—Ä–æ—Å—Ç—ñ—à–µ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–∞–ª—ñü§ù''',
                             reply_markup=kb.start_reg
                             )

    else:
        await message.answer("–û–±–µ—Ä–∏ —Å–µ–∫—Ü—ñ—é", reply_markup=keyboards.mainkb)


@router.message(F.text == '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å')
async def start_of_reg(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è")
    await state.set_state(registrate_user.user_name)


@router.message(F.text == '–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ')
async def start_of_reg(message: Message, state: FSMContext):
    db.user_delete(message.from_user.id)
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è")
    await state.set_state(registrate_user.user_name)


@router.message(registrate_user.user_name)
async def reg_name(message: Message, state: FSMContext):
    if not bools.find_symbol(message.text):
        reg_info.append(message.text)
        await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ")
        await state.set_state(registrate_user.user_surname)
    else:
        await message.answer("fef")


@router.message(registrate_user.user_surname)
async def reg_surname(message: Message, state: FSMContext):
    if not bools.find_symbol(message.text):
        reg_info.append(message.text)
        await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è(DD.MM.YYYY)")
        await state.set_state(registrate_user.user_age)
    else:
        await message.answer("fef")


@router.message(registrate_user.user_age)
async def reg_age(message: Message, state: FSMContext):
    if bools.check_age_num(message.text):
        reg_info.append(message.text)
        await message.answer("–ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚òéÔ∏è",
                             reply_markup=kb.phone_kb)
        await state.set_state(registrate_user.user_phone)
    else:
        await message.answer("fef")


@router.message(registrate_user.user_phone)
async def reg_phone(message: Message, state: FSMContext):
    reg_info.append(message.contact.phone_number)
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É üìß",
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(registrate_user.user_email)


@router.message(registrate_user.user_email)
async def reg_email(message: Message, state: FSMContext):
    email_domain = ['@gmail.com', '@ukr.net', '@icloud.com', '@outlook.com']
    if any(domain in message.text for domain in email_domain):
        reg_info.append(message.text)

        name, surname, age, phone, email = reg_info

        db.add_user(user_id=message.from_user.id,
                    user_nickname=message.from_user.username,
                    user_name=name,
                    user_surname=surname,
                    user_age=age,
                    user_phone=phone,
                    user_email=email)

        reg_info.clear()

        await message.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úîÔ∏è", reply_markup=keyboards.mainkb)
        await state.clear()
    else:
        await message.answer("–ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥–∏ —ñ—Å–Ω—É—é—á—É –ø–æ—à—Ç—É")


# @router.message()
# async def trash(message: Message):
#     await message.answer("–ù–µ —Ä–æ–∑—É–º—ñ—é —Ç–µ–±–µ")


@router.message(Command("menu"))
async def start(message: Message):
    await message.answer("–û–±–µ—Ä–∏ —Å–µ–∫—Ü—ñ—é", reply_markup=keyboards.mainkb)
