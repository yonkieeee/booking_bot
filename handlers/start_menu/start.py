from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardRemove
from handlers.start_menu.user_db import DataBase
from handlers.start_menu import bools
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from handlers.start_menu import start_keyboard as kb
import keyboards

router = Router()
db = DataBase("db_plast.db")

reg_info = []


class registrate_user(StatesGroup):
    user_fullname = State()
    user_surname = State()
    user_age = State()
    user_phone = State()
    user_email = State()


@router.message(CommandStart() or Command("menu"))
async def start(message: Message, state: FSMContext):
    user_info = db.get_user(message.from_user.id)
    if not db.user_exists(message.from_user.id):
        await message.answer('''–°–ö–û–ë! –ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å :)
 
ü§ñ –Ø —á–∞—Ç-–±–æ—Ç —Å—Ç–∞–Ω–∏—Ü—ñ –õ—å–≤—ñ–≤. –í–º—ñ—é –±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏, –∞ —â–µ –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤—Å—ñ–ª—è–∫—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Å—Ç–æ—Å–æ–≤–Ω–æ –Ω–∞—à–∏—Ö –ø—Ä–∏–º—ñ—â–µ–Ω—å üè†

‚úÖ  –ê–±–∏ —è –º—ñ–≥ –±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—î —ñ–º‚Äô—è —Å–ø–æ—á–∞—Ç–∫—É –º–µ–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏. –î–ª—è —Ü—å–æ–≥–æ –¥–∞–π –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö üë§''',
                             reply_markup=kb.agree_button
                             )
    else:
        await state.clear()
        await message.answer("""–ß–∏–º —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?""", reply_markup=keyboards.mainkb)


@router.message(F.text == '–ü–æ–≥–æ–¥–∂—É—é—Å—å')
async def start_of_reg(message: Message, state: FSMContext):
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ")
    await state.set_state(registrate_user.user_fullname)


@router.message(F.text == '–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ')
async def start_of_reg(message: Message, state: FSMContext):
    reg_info.clear()
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ")
    await state.set_state(registrate_user.user_fullname)


@router.message(registrate_user.user_fullname)
async def reg_surname(message: Message, state: FSMContext):
    if bools.check_fullname(message.text):
        reg_info.append(message.text)
        await message.answer("–î–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.MM.–†–†–†–†\nüìÜ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 30.12.2001")
        await state.set_state(registrate_user.user_age)
    else:
        await message.answer("–¢–∏ –≤–≤—ñ–≤ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")


@router.message(registrate_user.user_age)
async def reg_age(message: Message, state: FSMContext):
    if bools.check_age_num(message.text):
        reg_info.append(message.text)
        await message.answer("–ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚òéÔ∏è",
                             reply_markup=kb.phone_kb)
        await state.set_state(registrate_user.user_phone)
    else:
        await message.answer("–¢–∏ –≤–≤—ñ–≤ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")


@router.message(registrate_user.user_phone)
async def reg_phone(message: Message, state: FSMContext):
    reg_info.append(message.contact.phone_number)

    fullname, age, phone = reg_info
    name, surname = str(fullname).split()

    print(reg_info)
    if db.user_exists(message.from_user.id):
        db.user_delete(message.from_user.id)

        db.add_user(user_id=message.from_user.id,
                    user_nickname=message.from_user.username,
                    user_name=name,
                    user_surname=surname,
                    user_age=age,
                    user_phone=phone)
    else:
        db.add_user(user_id=message.from_user.id,
                    user_nickname=message.from_user.username,
                    user_name=name,
                    user_surname=surname,
                    user_age=age,
                    user_phone=phone)
    reg_info.clear()
    if message.from_user.id == "719886646":
        await message.answer_photo("https://t.me/c/1544453874/41907")
        await message.answer("–ó–¥–∞—Ä–æ–≤ —á—É—à–ø–∞–Ω")
        await message.answer_photo("https://t.me/c/1544453874/47740")

    await message.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úîÔ∏è", reply_markup=keyboards.mainkb)
    await state.clear()
    await state.set_state(registrate_user.user_email)


'''@router.message(registrate_user.user_email)
async def reg_email(message: Message, state: FSMContext):
    email_domain = ['@gmail.com', '@ukr.net', '@icloud.com', '@outlook.com']
    if any(domain in message.text for domain in email_domain):
        reg_info.append(message.text)

        name, surname, age, phone, email = reg_info

        db.add_user(user_id=message.from_user.id,
                    user_nickname=message.from_user.username,
                    user_name=name,
                    user_surname=surname,
                    user_age=age,
                    user_phone=phone,
                    user_email=email)

        reg_info.clear()

        await message.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úîÔ∏è", reply_markup=keyboards.mainkb)
        await state.clear()
    else:
        await message.answer("–ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥–∏ —ñ—Å–Ω—É—é—á—É –ø–æ—à—Ç—É")'''


@router.message(F.text == "–•—Ç–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫ —Ü—å–æ–≥–æ –ª–∞–π–Ω–∞?")
async def trash(message: Message):
    await message.answer("@naza_rko")


